//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace KFlearning.Core {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Constants {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Constants() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("KFlearning.Core.Constants", typeof(Constants).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Alias /{ALIAS_NAME} &quot;{ALIAS_PATH}&quot;
        ///&lt;Directory &quot;{ALIAS_PATH}&quot;&gt;
        ///	Options Indexes FollowSymLinks MultiViews
        ///	AllowOverride all  
        ///	Require local
        ///&lt;/Directory&gt;.
        /// </summary>
        public static string AliasTemplate {
            get {
                return ResourceManager.GetString("AliasTemplate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to @php &quot;%~dp0composer.phar&quot; %*.
        /// </summary>
        public static string ComposerBatch {
            get {
                return ResourceManager.GetString("ComposerBatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to database.db.
        /// </summary>
        public static string DatabaseConnectionString {
            get {
                return ResourceManager.GetString("DatabaseConnectionString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;VirtualHost _default_:80&gt;
        ///    &lt;Directory &quot;{KFLEARNING_DIR_ROOT}&quot;&gt;
        ///        AllowOverride All
        ///        Require all granted
        ///    &lt;/Directory&gt;
        ///&lt;/VirtualHost&gt;
        ///.
        /// </summary>
        public static string DefaultVirtualHost {
            get {
                return ResourceManager.GetString("DefaultVirtualHost", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to dev.
        /// </summary>
        public static string DomainName {
            get {
                return ResourceManager.GetString("DomainName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to https://api.kodesiana.com.
        /// </summary>
        public static string EndpointBase {
            get {
                return ResourceManager.GetString("EndpointBase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;/body&gt;&lt;/html&gt;.
        /// </summary>
        public static string HtmlBodyEnd {
            get {
                return ResourceManager.GetString("HtmlBodyEnd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;!DOCTYPE html&gt;
        ///&lt;html lang=&quot;en&quot;&gt;
        ///&lt;head&gt;
        ///    &lt;meta charset=&quot;UTF-8&quot;&gt;
        ///    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
        ///    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;
        ///    &lt;style&gt;
        ///    body {
        ///        background: #252525;
        ///        color: #ffffff
        ///    }
        ///    &lt;/style&gt;
        ///&lt;/head&gt;
        ///&lt;body&gt;.
        /// </summary>
        public static string HtmlBodyStart {
            get {
                return ResourceManager.GetString("HtmlBodyStart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Define SRVROOT &quot;{HTTPD_ROOT}&quot;
        ///ServerRoot &quot;${SRVROOT}&quot;
        ///Define ENABLE_TLS13 &quot;Yes&quot;
        ///Listen 80
        ///
        ///DocumentRoot &quot;{DOCUMENT_ROOT}&quot;
        ///
        ///ServerAdmin admin@example.com
        ///ServerName KFLearning
        ///
        ///ErrorLog &quot;logs/error.log&quot;
        ///LogLevel error
        ///
        ///EnableMMAP off
        ///EnableSendfile on
        ///AcceptFilter http none
        ///AcceptFilter https none
        ///
        ///LoadModule access_compat_module modules/mod_access_compat.so
        ///LoadModule actions_module modules/mod_actions.so
        ///LoadModule alias_module modules/mod_alias.so
        ///LoadModule allowmethods_module module [rest of string was truncated]&quot;;.
        /// </summary>
        public static string HttpdConfig {
            get {
                return ResourceManager.GetString("HttpdConfig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to httpd.
        /// </summary>
        public static string HttpdProcessName {
            get {
                return ResourceManager.GetString("HttpdProcessName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;!DOCTYPE html&gt;
        ///&lt;html lang=&quot;en&quot;&gt;
        ///
        ///&lt;head&gt;
        ///    &lt;meta charset=&quot;UTF-8&quot;&gt;
        ///    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
        ///    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;
        ///    &lt;!--&lt;meta http-equiv=&quot;refresh&quot; content=&quot;10; url=https://kodesiana.com&quot;&gt;--&gt;
        ///    &lt;title&gt;KFlearning&lt;/title&gt;
        ///
        ///    &lt;style&gt;
        ///        body,
        ///        html {
        ///            height: 90%;
        ///            display: grid;
        ///            font-family: &apos;Lucida Sans&apos;, &apos;Lucida Sans Regular&apos;, &apos;Lucida Grande&apos;, &apos;Lucida Sans  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string IndexPageHtml {
            get {
                return ResourceManager.GetString("IndexPageHtml", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [client-server]
        ///# Uncomment these if you want to use a nonstandard connection to MariaDB
        ///#socket=/tmp/mysql.sock
        ///#port=3306
        ///
        ///# This will be passed to all MariaDB clients
        ///[client]
        ///#password=my_password
        ///
        ///# The MariaDB server
        ///[mysqld]
        ///# Directory where you want to put your data
        ///data={MARIADB_INSTALL_ROOT}data
        ///# Directory for the errmsg.sys file in the language you want to use
        ///language={MARIADB_INSTALL_ROOT}share/english
        ///
        ///# This is the prefix name to be used for all log, error and replication fi [rest of string was truncated]&quot;;.
        /// </summary>
        public static string MariaDbConfig {
            get {
                return ResourceManager.GetString("MariaDbConfig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to mysqld.
        /// </summary>
        public static string MariadbProcessName {
            get {
                return ResourceManager.GetString("MariadbProcessName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to kf-project.json.
        /// </summary>
        public static string MetadataFileName {
            get {
                return ResourceManager.GetString("MetadataFileName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [PHP]
        ///engine = On
        ///short_open_tag = Off
        ///precision = 14
        ///output_buffering = 4096
        ///zlib.output_compression = Off
        ///implicit_flush = Off
        ///unserialize_callback_func =
        ///serialize_precision = -1
        ///disable_functions =
        ///disable_classes =
        ///zend.enable_gc = On
        ///expose_php = On
        ///max_execution_time = 36000
        ///max_input_time = 60
        ///memory_limit = 512M
        ///error_reporting = E_ALL
        ///display_errors = On
        ///display_startup_errors = On
        ///log_errors = On
        ///log_errors_max_len = 1024
        ///ignore_repeated_errors = Off
        ///ignore_repeated_source = [rest of string was truncated]&quot;;.
        /// </summary>
        public static string PhpConfig {
            get {
                return ResourceManager.GetString("PhpConfig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?php phpinfo(); ?&gt;.
        /// </summary>
        public static string PhpInfoPage {
            get {
                return ResourceManager.GetString("PhpInfoPage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        public static byte[] template_cpp {
            get {
                object obj = ResourceManager.GetObject("template_cpp", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;VirtualHost *:80&gt; 
        ///    DocumentRoot &quot;{REPO_PATH}&quot;
        ///    ServerName {REPO_DOMAIN}
        ///    ServerAlias *.{REPO_DOMAIN}
        ///    &lt;Directory &quot;{REPO_PATH}&quot;&gt;
        ///        AllowOverride All
        ///        Require all granted
        ///    &lt;/Directory&gt;
        ///&lt;/VirtualHost&gt;.
        /// </summary>
        public static string VirtualHostTemplate {
            get {
                return ResourceManager.GetString("VirtualHostTemplate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {
        ///    &quot;terminal.integrated.shell.windows&quot;: &quot;C:/Windows/System32/cmd.exe&quot;,
        ///    &quot;terminal.integrated.rendererType&quot;: &quot;dom&quot;,
        ///	
        ///	&quot;vsintellicode.modify.editor.suggestSelection&quot;: &quot;automaticallyOverrodeDefaultValue&quot;,
        ///
        ///	&quot;editor.suggestSelection&quot;: &quot;first&quot;,
        ///    &quot;[json]&quot;: {
        ///        &quot;editor.defaultFormatter&quot;: &quot;HookyQR.beautify&quot;
        ///    },	
        ///
        ///    &quot;php.validate.executablePath&quot;: &quot;{PHP_PATH}&quot;,
        ///    &quot;php.executablePath&quot;: &quot;{PHP_PATH}&quot;,
        ///    &quot;php.suggest.basic&quot;: false,   
        ///}.
        /// </summary>
        public static string VscodeConfig {
            get {
                return ResourceManager.GetString("VscodeConfig", resourceCulture);
            }
        }
    }
}
